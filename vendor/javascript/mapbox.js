// mapbox@1.0.0 downloaded from https://ga.jspm.io/npm:mapbox@1.0.0-beta10/lib/mapbox.js

import{_ as e,a as t}from"../_/55cdd516.js";import"es6-promise";import"rest";import"rest/interceptor/errorCode";import"rest/interceptor/pathPrefix";import"rest/interceptor/mime";import"rest/interceptor/template";import"rest/interceptor/defaultRequest";import"rest/interceptor";import"rest/parsers/rfc5988";import"url";import"querystring";import"rest/util/base64";import r from"./get_user.js";import o from"./services/geocoding.js";import a from"./services/datasets.js";import n from"rest/util/uriTemplate";import i from"buffer";var s={};s.extendMutable=extendMutable;s.extend=extend;var p=Object.prototype.hasOwnProperty;function extendMutable(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var o in r)p.call(r,o)&&(e[o]=r[o])}return e}function extend(){var e={};for(var t=0;t<arguments.length;t++){var r=arguments[t];for(var o in r)p.call(r,o)&&(e[o]=r[o])}return e}var l={};var c=e;function invariantLocation(e){c("number"===typeof e.latitude&&"number"===typeof e.longitude,"location must be an object with numeric latitude & longitude properties");void 0!==e.zoom&&c("number"===typeof e.zoom,"zoom must be numeric")}l=invariantLocation;var u=l;var m={};var f=u;function formatPoints(e){return e.map((function(e){f(e);return e.longitude+","+e.latitude})).join(";")}m=formatPoints;var y=m;var v={};var d=e;var b=y;var h=t;var g=h("MapboxSurface");var w="/v4/surface/{mapid}.json{?access_token,layer,fields,points,geojson,interpolate,encoded_polyline}";g.prototype.surface=function(e,t,r,o,a,n){if(void 0===n&&"function"===typeof a){n=a;a={}}d("string"===typeof e,"mapid must be a string");d("string"===typeof t,"layer must be a string");d(Array.isArray(r),"fields must be an array of strings");d(Array.isArray(o)||"string"===typeof o,"path must be an array of objects or a string");d("object"===typeof a,"options must be an object");var i=true,s=false;if(void 0!==a.interpolate){d("boolean"===typeof a.interpolate,"interpolate must be a boolean");i=a.interpolate}if(void 0!==a.geojson){d("boolean"===typeof a.geojson,"geojson option must be boolean");s=a.geojson}var p={geojson:s,layer:t,mapid:e,fields:r.join(","),interpolate:i};Array.isArray(o)?p.points=b(o):p.encoded_polyline=o;if(void 0!==a.zoom){d("number"===typeof a.zoom,"zoom must be a number");p.z=a.zoom}return this.client({path:w,params:p,callback:n})};v=g;var k=v;var j={};var _=e;var x=y;var S=t;var z=S("MapboxDirections");var A="/directions/v5/{account}/{profile}/{encodedWaypoints}.json{?access_token,alternatives,geometries,overview,radiuses,steps,continue_straight,bearings}";z.prototype.getDirections=function(e,t,r){if(void 0===r&&"function"===typeof t){r=t;t={}}else void 0===t&&(t={});_(Array.isArray(e),"waypoints must be an array");_("object"===typeof t,"options must be an object");var o=x(e);var a={encodedWaypoints:o,profile:"driving",account:"mapbox",alternatives:true,steps:true,geometries:"geojson"};if(t.profile){_("string"===typeof t.profile,"profile option must be string");a.profile=t.profile}if(t.account){_("string"===typeof t.account,"account option must be string");a.account=t.account}if("undefined"!==typeof t.alternatives){_("boolean"===typeof t.alternatives,"alternatives option must be boolean");a.alternatives=t.alternatives}if(t.radiuses){_(Array.isArray(t.radiuses),"radiuses must be an array");_(t.radiuses.length===e.length,"There must be as many radiuses as there are waypoints in the request");a.radiuses=t.radiuses.join(";")}if("undefined"!==typeof t.steps){_("boolean"===typeof t.steps,"steps option must be boolean");a.steps=t.steps}var n=["polyline","geojson"];if(t.geometries){_(-1!==n.indexOf(t.geometries),"geometries option must be "+n);a.geometries=t.geometries}var i=["simplified","full"];if(t.overview){_(-1!==i.indexOf(t.overview),"overview option must be "+i);a.overview=t.overview}if("undefined"!==typeof t.continue_straight){_("boolean"===typeof t.continue_straight,"continue_straight option must be boolean");a.continue_straight=t.continue_straight}if(t.bearings){_(Array.isArray(t.radiuses),"bearings must be an array");_(t.bearings.length===e.length,"There must be as many bearings as there are waypoints in the request");a.bearings=t.bearings.join(";")}return this.client({path:A,params:a,callback:r})};j=z;var M=j;var T={};var O=e;var q=t;var N=T=q("MapboxUploads");var G="/uploads/v1/{owner}{?access_token}";var J="/uploads/v1/{owner}/{upload}{?access_token}";var C="/uploads/v1/{owner}/credentials{?access_token}";N.prototype.listUploads=function(e){return this.client({path:G,params:{owner:this.owner},callback:e})};N.prototype.createUploadCredentials=function(e){return this.client({path:C,params:{owner:this.owner},method:"post",callback:e})};N.prototype.createUpload=function(e,t){O("object"===typeof e,"options must be an object");return this.client({path:G,params:{owner:this.owner},entity:e,callback:t})};N.prototype.readUpload=function(e,t){O("string"===typeof e,"upload must be a string");return this.client({path:J,params:{owner:this.owner,upload:e},callback:t})};N.prototype.deleteUpload=function(e,t){O("string"===typeof e,"upload must be a string");return this.client({method:"delete",path:J,params:{owner:this.owner,upload:e},callback:t})};var P=T;var U={};var L=e;var R=t;var W=R("MapboxMatching");var B="/matching/v5/{account}/{profile}/{coordinates}.json{?access_token,geometries,radiuses,steps,overview,timestamps,annotations}";W.prototype.matching=function(e,t,r){if(void 0===r&&"function"===typeof t){r=t;t={}}L(Array.isArray(e),"coordinates must be an array");var o={profile:"driving",account:"mapbox",geometries:"geojson",coordinates:e.join(";")};if(t.profile){L("string"===typeof t.profile,"profile option must be string");o.profile=t.profile}var a=["polyline","geojson"];if(t.geometries){L(-1!==a.indexOf(t.geometries),"geometries option must be "+a);o.geometries=t.geometries}if(t.radiuses){L(Array.isArray(t.radiuses),"radiuses must be an array");L(t.radiuses.length===e.length,"There must be as many radiuses as there are coordinates in the request");o.radiuses=t.radiuses.join(";")}if("undefined"!==typeof t.steps){L("boolean"===typeof t.steps,"steps option must be boolean");o.steps=t.steps}var n=["full","simplified"];if("undefined"!==typeof t.overview){L(-1!==n.indexOf(t.overview)||false===t.overview,"overview option must be "+n+" or false");o.overview=t.overview}if(t.timestamps){L(Array.isArray(t.timestamps),"timestamps must be an array");L(t.timestamps.length===e.length,"There must be as many timestamps as there are coordinates in the request");o.timestamps=t.timestamps.join(";")}if(t.annotations){L(Array.isArray(t.annotations),"annotations must be an array");o.annotations=t.annotations.join()}return this.client({path:B,params:o,method:"get",callback:r})};U=W;var I=U;var D={};var F=e;var E=y;var H=t;var K=H("MapboxMatrix");var Q="/directions-matrix/v1/mapbox/{profile}/{encodedWaypoints}.json{?access_token}";K.prototype.getMatrix=function(e,t,r){if(void 0===r&&"function"===typeof t){r=t;t={}}else void 0===t&&(t={});F(Array.isArray(e),"waypoints must be an array");F("object"===typeof t,"options must be an object");var o=E(e);var a={encodedWaypoints:o,profile:"driving"};if(t.profile){F("string"===typeof t.profile,"profile option must be string");a.profile=t.profile}return this.client({path:Q,params:a,callback:r})};D=K;var V=D;var X={};var Y=e;var Z=t;var $=X=Z("MapboxTilestats");var ee="/tilestats/v1/{owner}/{tileset}{?access_token}";$.prototype.getTilestats=function(e,t){Y("string"===typeof e,"tileset must be a string");var r=e.split(".")[0];r===e&&(r=this.owner);return this.client({path:ee,params:{owner:r,tileset:e},callback:t})};$.prototype.putTilestats=function(e,t,r){Y("string"===typeof e,"tileset must be a string");var o=e.split(".")[0];o===e&&(o=this.owner);return this.client({path:ee,params:{owner:o,tileset:e},entity:t,method:"put",callback:r})};var te=X;var re={};var oe=i.Buffer;var ae=e;var ne=n;var ie=t;var se=re=ie("MapboxStyles");var pe="/styles/v1/{owner}{?access_token}";var le="/styles/v1/{owner}{?access_token}";var ce="/styles/v1/{owner}/{styleid}{?access_token}";var ue="/styles/v1/{owner}/{styleid}{?access_token}";var me="/styles/v1/{owner}/{styleid}{?access_token}";var fe="/styles/v1/{owner}/{styleid}.html{?access_token,zoomwheel,title}";var ye="/styles/v1/{owner}/{styleid}/sprite{+retina}{.format}{?access_token}";var ve="/styles/v1/{owner}/{styleid}/sprite/{iconName}{?access_token}";var de="/fonts/v1/{owner}/{font}/{start}-{end}.pbf{?access_token}";se.prototype.listStyles=function(e){return this.client({path:pe,params:{owner:this.owner},callback:e})};se.prototype.createStyle=function(e,t){return this.client({path:le,params:{owner:this.owner},entity:e,callback:t})};se.prototype.updateStyle=function(e,t,r){ae("string"===typeof t,"style id must be a string");return this.client({path:ue,params:{owner:this.owner,styleid:t},entity:e,method:"patch",callback:r})};se.prototype.deleteStyle=function(e,t){ae("string"===typeof e,"styleid must be a string");return this.client({path:me,params:{owner:this.owner,styleid:e},method:"delete",callback:t})};se.prototype.readStyle=function(e,t){ae("string"===typeof e,"styleid must be a string");return this.client({path:ce,params:{owner:this.owner,styleid:e},callback:t})};se.prototype.readSprite=function(e,t,r){ae("string"===typeof e,"styleid must be a string");if("function"===typeof t){r=t;t={}}var o="";if(t.retina){ae("boolean"===typeof t.retina,"retina option must be a boolean value");t.retina&&(o="@2x")}var a="json";if(t.format){ae("json"===t.format||"png"===t.format,"format parameter must be either json or png");a=t.format}return this.client({path:ye,params:{owner:this.owner,retina:o,format:a,styleid:e},callback:r})};se.prototype.readFontGlyphRanges=function(e,t,r,o){ae("string"===typeof e,"font must be a string");ae("number"===typeof t,"start must be a number");ae("number"===typeof r,"end must be a number");return this.client({path:de,params:{owner:this.owner,font:e,start:t,end:r},callback:o})};se.prototype.addIcon=function(e,t,r,o){ae("string"===typeof e,"style must be a string");ae("string"===typeof t,"icon name must be a string");ae(oe.isBuffer(r),"icon must be a Buffer");return this.client({path:ve,params:{owner:this.owner,styleid:e,iconName:t},headers:{"Content-Type":"text/plain"},entity:r,method:"put",callback:o})};se.prototype.deleteIcon=function(e,t,r){ae("string"===typeof e,"style must be a string");ae("string"===typeof t,"icon name must be a string");return this.client({path:ve,params:{owner:this.owner,styleid:e,iconName:t},method:"delete",callback:r})};se.prototype.embedStyle=function(e,t){ae("string"===typeof e,"style must be a string");var r={styleid:e,access_token:this.accessToken,owner:this.owner,title:false,zoomwheel:true};if(t){if(void 0!==t.title){ae("boolean"===typeof t.title,"title must be a boolean");r.title=t.title}if(void 0!==t.zoomwheel){ae("boolean"===typeof t.zoomwheel,"zoomwheel must be a boolean");r.zoomwheel=t.zoomwheel}}return this.endpoint+ne.expand(fe,r)};var be=re;var he={};var ge={};function encode(e,t){e=Math.round(e*t);e<<=1;e<0&&(e=~e);var r="";while(e>=32){r+=String.fromCharCode((32|31&e)+63);e>>=5}r+=String.fromCharCode(e+63);return r}ge.encode=function(e,t){if(!e.length)return"";var r=Math.pow(10,t||5),o=encode(e[0][0],r)+encode(e[0][1],r);for(var a=1;a<e.length;a++){var n=e[a],i=e[a-1];o+=encode(n[0]-i[0],r);o+=encode(n[1]-i[1],r)}return o};function flipped(e){var t=[];for(var r=0;r<e.length;r++)t.push(e[r].slice().reverse());return t}ge.fromGeoJSON=function(e,t){e&&"Feature"===e.type&&(e=e.geometry);if(!e||"LineString"!==e.type)throw new Error("Input must be a GeoJSON LineString");return ge.encode(flipped(e.coordinates),t)};he=ge;var we=he;var ke={};var je=e,_e=u,xe=we;function encodeMarkers(e){return e.map((function(e){_e(e);var t=e.size||"l";var r=e.symbol||"circle";return"pin-"+t+"-"+r+"("+e.longitude+","+e.latitude+")"})).join(",")}ke.encodeMarkers=encodeMarkers;function encodePath(e){je("LineString"===e.geojson.type,"path line must be a LineString");var t=xe.fromGeoJSON(e.geojson);var r="";if(e.style){void 0!==e.style.strokewidth&&(r+="-"+e.style.strokewidth);void 0!==e.style.strokecolor&&(r+="+"+e.style.strokecolor)}return"path"+r+"("+t+")"}ke.encodePath=encodePath;function encodeGeoJSON(e){var t=JSON.stringify(e);je(t.length<4096,"encoded GeoJSON must be shorter than 4096 characters long");return"geojson("+t+")"}ke.encodeGeoJSON=encodeGeoJSON;var Se={};var ze=e;var Ae=s.extend;var Me=n;var Te=ke;var Oe=u;var qe=t;var Ne=qe("MapboxStatic");var Ge="/styles/v1/{username}/{styleid}/static{+overlay}/{+xyzbp}/{width}x{height}{+retina}{?access_token,attribution,logo,before_layer}";var Je="/v4/{mapid}{+overlay}/{+xyz}/{width}x{height}{+retina}{.format}{?access_token}";Ne.prototype.getStaticURL=function(e,t,r,o,a,n){ze("string"===typeof e,"username option required and must be a string");ze("string"===typeof t,"styleid option required and must be a string");ze("number"===typeof r,"width option required and must be a number");ze("number"===typeof o,"height option required and must be a number");var i={retina:""};var s;if("auto"===a)s="auto";else{Oe(a);s=a.longitude+","+a.latitude+","+a.zoom;"pitch"in a?s+=","+(a.bearing||0)+","+a.pitch:"bearing"in a&&(s+=","+a.bearing)}var p={};if(n){ze("object"===typeof n,"options must be an object");if(n.format){ze("string"===typeof n.format,"format must be a string");p.format=n.format}if(n.retina){ze("boolean"===typeof n.retina,"retina must be a boolean");p.retina=n.retina}n.markers?p.overlay="/"+Te.encodeMarkers(n.markers):n.geojson?p.overlay="/"+Te.encodeGeoJSON(n.geojson):n.path&&(p.overlay="/"+Te.encodePath(n.path));if("attribution"in n){ze("boolean"===typeof n.attribution,"attribution must be a boolean");p.attribution=n.attribution}if("logo"in n){ze("boolean"===typeof n.logo,"logo must be a boolean");p.logo=n.logo}if(n.before_layer){ze("string"===typeof n.before_layer,"before_layer must be a string");p.before_layer=n.before_layer}}var l=Ae(i,p,{username:e,styleid:t,width:r,xyzbp:s,height:o,access_token:this.accessToken});true===l.retina&&(l.retina="@2x");return this.endpoint+Me.expand(Ge,l)};Ne.prototype.getStaticClassicURL=function(e,t,r,o,a){ze("string"===typeof e,"mapid option required and must be a string");ze("number"===typeof t,"width option required and must be a number");ze("number"===typeof r,"height option required and must be a number");var n={format:"png",retina:""};var i;if("auto"===o)i="auto";else{Oe(o);i=o.longitude+","+o.latitude+","+o.zoom}var s={};if(a){ze("object"===typeof a,"options must be an object");if(a.format){ze("string"===typeof a.format,"format must be a string");s.format=a.format}if(a.retina){ze("boolean"===typeof a.retina,"retina must be a boolean");s.retina=a.retina}a.markers?s.overlay="/"+Te.encodeMarkers(a.markers):a.geojson?s.overlay="/"+Te.encodeGeoJSON(a.geojson):a.path&&(s.overlay="/"+Te.encodePath(a.path))}var p=Ae(n,s,{mapid:e,width:t,xyz:i,height:r,access_token:this.accessToken});true===p.retina&&(p.retina="@2x");return this.endpoint+Me.expand(Je,p)};Se=Ne;var Ce=Se;var Pe={};var Ue=e;var Le=t;var Re=Pe=Le("MapboxTilesets");var We="/v4/{mapid}/tilequery/{longitude},{latitude}.json{?access_token,radius,limit}";var Be="/tilesets/v1/{owner}{?access_token,limit}";Re.prototype.tilequery=function(e,t,r,o){Ue("string"===typeof e,"mapid must be a string");Ue("object"===typeof t,"position must be an array");Ue(2==t.length,"position must be an array of length 2");Ue("number"===typeof t[0]&&"number"===typeof t[1],"position must be an array of two numbers");if("function"===typeof r){o=r;r={}}return this.client({path:We,params:{mapid:e,longitude:t[0],latitude:t[1],radius:r.radius,limit:r.limit},callback:o})};Re.prototype.listTilesets=function(e,t){if("function"===typeof e){t=e;e=null}e=e||{};return this.client({path:Be,params:{owner:this.owner,limit:e.limit},callback:t})};var Ie=Pe;var De={};var Fe=e;var Ee=t;var He=De=Ee("MapboxTokens");var Ke="/tokens/v2/{owner}{?access_token}";var Qe="/tokens/v2/{owner}{?access_token}";var Ve="/tokens/v2/{owner}/{authorization_id}{?access_token}";var Xe="/tokens/v2/{owner}/{authorization_id}{?access_token}";var Ye="/tokens/v2{?access_token}";var Ze="/scopes/v1/{owner}{?access_token}";He.prototype.listTokens=function(e){return this.client({path:Ke,params:{owner:this.owner},callback:e})};He.prototype.createToken=function(e,t,r){Fe("string"===typeof e,"note must be a string");Fe("[object Array]"===Object.prototype.toString.call(t),"scopes must be an array");return this.client({path:Qe,params:{owner:this.owner},entity:{scopes:t,note:e},callback:r})};He.prototype.createTemporaryToken=function(e,t,r){Fe("string"===typeof e,"expires must be a string");Fe("[object Array]"===Object.prototype.toString.call(t),"scopes must be an array");return this.client({path:Qe,params:{owner:this.owner},entity:{scopes:t,expires:e},callback:r})};He.prototype.updateTokenAuthorization=function(e,t,r){Fe("string"===typeof e,"authorization_id must be a string");Fe("[object Array]"===Object.prototype.toString.call(t),"scopes must be an array");return this.client({path:Ve,params:{authorization_id:e,owner:this.owner},entity:{scopes:t},method:"patch",callback:r})};He.prototype.deleteTokenAuthorization=function(e,t){Fe("string"===typeof e,"authorization_id must be a string");return this.client({path:Xe,params:{authorization_id:e,owner:this.owner},method:"delete",callback:t})};He.prototype.retrieveToken=function(e,t){Fe("string"===typeof e,"access_token must be a string");return this.client({path:Ye,params:{access_token:e},callback:t})};He.prototype.listScopes=function(e){return this.client({path:Ze,params:{owner:this.owner},callback:e})};var $e=De;var et={};var tt=t;var rt=s.extendMutable;var ot=r;var at=o;var nt=k;var it=M;var st=P;var pt=I;var lt=a;var ct=V;var ut=te;var mt=be;var ft=Ce;var yt=Ie;var vt=$e;var dt=tt("MapboxClient");rt(dt.prototype,at.prototype,nt.prototype,it.prototype,ct.prototype,pt.prototype,lt.prototype,st.prototype,ut.prototype,mt.prototype,ft.prototype,yt.prototype,vt.prototype);dt.getUser=ot;et=dt;var bt=et;export default bt;

